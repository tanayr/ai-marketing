"use client";

import React, { useCallback, useEffect, useState } from 'react';
import { CanvasProvider, useCanvas } from './hooks/use-canvas';
import { fabric, FabricCanvas, registerEnhancedTextClass } from './utils/fabric-imports';

// Register EnhancedText class for proper serialization
if (typeof window !== 'undefined') {
  registerEnhancedTextClass();
}
import { FabricCanvas as FabricCanvasComponent } from './core/fabric-canvas';
import { Toolbar } from './toolbar/toolbar';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Undo, Redo, ZoomIn, ZoomOut, File, Plus, Minus, Maximize, Download } from 'lucide-react';
import { useHotkeys } from 'react-hotkeys-hook';
import { toast } from 'sonner';
import { RetouchrAsset } from './types';
// Import text editing components
import { TextFormattingProvider } from './text-editing/TextFormattingContext';
import { FixedTextToolbar } from './text-editing/FixedTextToolbar';

// Import CSS variables for toolbar height
import './styles.css';

interface RetouchrStudioProps {
  assetId?: string;
  initialData?: any;
  onSave?: (data: any) => Promise<void>;
  defaultCollapsed?: boolean;
  designName?: string;
  lastUpdated?: string;
  onNewDesign?: () => void;
}

// Main Studio wrapper component
export const RetouchrStudio: React.FC<RetouchrStudioProps> = ({
  assetId,
  initialData,
  onSave,
  defaultCollapsed = false,
  designName,
  lastUpdated,
  onNewDesign,
}) => {
  return (
    <CanvasProvider>
      <TextFormattingProvider>
        <RetouchrStudioContent
          assetId={assetId}
          initialData={initialData}
          onSave={onSave}
          defaultCollapsed={defaultCollapsed}
          designName={designName}
          lastUpdated={lastUpdated}
          onNewDesign={onNewDesign}
        />
      </TextFormattingProvider>
    </CanvasProvider>
  );
};

// Inner content component that uses the canvas context
const RetouchrStudioContent: React.FC<RetouchrStudioProps> = ({
  assetId,
  initialData,
  onSave,
  defaultCollapsed = false,
  designName,
  lastUpdated,
  onNewDesign,
}) => {
  const { 
    canvas, 
    setCanvas, 
    saveCanvas, 
    isSaving, 
    setIsSaving 
  } = useCanvas();
  
  const [undoStack, setUndoStack] = useState<string[]>([]);
  const [redoStack, setRedoStack] = useState<string[]>([]);
  const [currentState, setCurrentState] = useState<string | null>(null);
  const [zoom, setZoom] = useState(1);
  
  // Initialize history when canvas is ready
  useEffect(() => {
    if (canvas && initialData?.fabricCanvas) {
      const initialJson = JSON.stringify(initialData.fabricCanvas);
      setCurrentState(initialJson);
      setUndoStack([initialJson]);
    }
  }, [canvas, initialData]);
  
  // Record history on object modifications
  useEffect(() => {
    if (!canvas) return;
    
    const handleObjectModified = () => {
      const json = JSON.stringify(canvas.toJSON(['id', 'name']));
      
      if (json !== currentState) {
        setUndoStack(prev => [...prev, json]);
        setRedoStack([]);
        setCurrentState(json);
      }
    };
    
    canvas.on('object:modified', handleObjectModified);
    canvas.on('object:added', handleObjectModified);
    canvas.on('object:removed', handleObjectModified);
    
    return () => {
      canvas.off('object:modified', handleObjectModified);
      canvas.off('object:added', handleObjectModified);
      canvas.off('object:removed', handleObjectModified);
    };
  }, [canvas, currentState]);
  
  // Handle undo
  const handleUndo = useCallback(() => {
    if (!canvas || undoStack.length <= 1) return;
    
    // Get the previous state
    const newUndoStack = [...undoStack];
    const currentJson = newUndoStack.pop();
    
    if (currentJson && newUndoStack.length > 0) {
      const previousJson = newUndoStack[newUndoStack.length - 1];
      
      // Add current state to redo stack
      setRedoStack(prev => [...prev, currentJson]);
      
      // Apply previous state
      canvas.loadFromJSON(previousJson, () => {
        canvas.renderAll();
      });
      
      setUndoStack(newUndoStack);
      setCurrentState(previousJson);
    }
  }, [canvas, undoStack]);
  
  // Handle redo
  const handleRedo = useCallback(() => {
    if (!canvas || redoStack.length === 0) return;
    
    // Get next state
    const newRedoStack = [...redoStack];
    const nextJson = newRedoStack.pop();
    
    if (nextJson) {
      // Add current state to undo stack
      setUndoStack(prev => [...prev, nextJson]);
      
      // Apply next state
      canvas.loadFromJSON(nextJson, () => {
        canvas.renderAll();
      });
      
      setRedoStack(newRedoStack);
      setCurrentState(nextJson);
    }
  }, [canvas, redoStack]);
  
  // Handle zooming with only CSS transform (no canvas.setZoom)
  const handleZoomIn = useCallback(() => {
    if (!canvas) return;
    
    const newZoom = Math.min(zoom + 0.1, 3);
    setZoom(newZoom);
    
    // No longer call canvas.setZoom() to avoid double-scaling
    // Just update the state and let the CSS transform handle it
    
    // Ensure the canvas is updated
    canvas.renderAll();
  }, [canvas, zoom]);
  
  const handleZoomOut = useCallback(() => {
    if (!canvas) return;
    
    const newZoom = Math.max(zoom - 0.1, 0.1);
    setZoom(newZoom);
    
    // No longer call canvas.setZoom() to avoid double-scaling
    // Just update the state and let the CSS transform handle it
    
    // Ensure the canvas is updated
    canvas.renderAll();
  }, [canvas, zoom]);
  
  // Handle save with background image handling
  const handleSave = useCallback(async () => {
    if (!canvas || !onSave) return;
    
    try {
      setIsSaving(true);
      
      // Check if we need to handle locally stored background images
      if (typeof window !== 'undefined') {
        const localBgData = localStorage.getItem('retouchr_current_bg_image_data');
        if (localBgData) {
          // Background image data is already in localStorage and will be included
          // in the canvas JSON when saveCanvas() is called
          console.log('FRONTEND: Found locally cached background image, ensuring it gets saved');
        }
      }
      
      // Save the canvas (will include any background image)
      const canvasJSON = saveCanvas();
      
      // Log the canvas JSON being saved (frontend)
      console.log('FRONTEND: Saving canvas JSON:', canvasJSON);
      console.log('FRONTEND: JSON preview:', JSON.parse(canvasJSON));
      
      // Send to server
      const result = await onSave({
        canvasJSON,
        createVersion: true,
      });
      
      // Log the response from the save operation
      console.log('FRONTEND: Save response:', result);
      
      toast.success("Design saved successfully");
    } catch (error) {
      console.error("Error saving design:", error);
      toast.error("Failed to save design");
    } finally {
      setIsSaving(false);
    }
  }, [canvas, onSave, saveCanvas, setIsSaving]);
  
  // Keyboard shortcuts
  useHotkeys('ctrl+z, cmd+z', (e) => {
    e.preventDefault();
    handleUndo();
  });
  
  useHotkeys('ctrl+y, cmd+shift+z', (e) => {
    e.preventDefault();
    handleRedo();
  });
  
  useHotkeys('ctrl+s, cmd+s', (e) => {
    e.preventDefault();
    handleSave();
  });
  
  // Handle canvas ready
  const handleCanvasReady = (canvasInstance: FabricCanvas) => {
    // Cast to the expected type when setting the canvas
    setCanvas(canvasInstance as any);
  };

  return (
    <div className="flex flex-col h-full w-full overflow-hidden bg-background">
      {/* Header */}
      <div className="h-10 border-b bg-card px-3 py-1 flex items-center justify-between z-10">
        <div className="flex items-center space-x-2">
          <h1 className="text-lg font-semibold text-foreground mr-2">
            {designName || (assetId ? 'Editing Design' : 'New Design')}
          </h1>
          
          <div className="text-sm font-medium text-foreground">
            {assetId ? 'Editing Design' : 'New Design'}
          </div>
          
          <div className="flex items-center space-x-1 ml-4">
            <Button
              variant="ghost"
              size="icon"
              onClick={handleUndo}
              disabled={undoStack.length <= 1}
              title="Undo (Ctrl+Z)"
              className="h-8 w-8"
            >
              <Undo className="h-4 w-4" />
            </Button>
            <Button
              variant="ghost"
              size="icon"
              onClick={handleRedo}
              disabled={redoStack.length === 0}
              title="Redo (Ctrl+Y)"
              className="h-8 w-8"
            >
              <Redo className="h-4 w-4" />
            </Button>
            
            <div className="border-l h-5 mx-2" />
            
            <div className="flex items-center">
              <Button
                variant="ghost"
                size="icon"
                onClick={handleZoomOut}
                disabled={zoom <= 0.2}
                title="Zoom Out"
                className="h-8 w-8"
              >
                <Minus className="h-4 w-4" />
              </Button>
              <span className="text-xs w-10 text-center font-mono">
                {Math.round(zoom * 100)}%
              </span>
              <Button
                variant="ghost"
                size="icon"
                onClick={handleZoomIn}
                disabled={zoom >= 3}
                title="Zoom In"
                className="h-8 w-8"
              >
                <Plus className="h-4 w-4" />
              </Button>
              <Button
                variant="ghost"
                size="icon"
                onClick={() => {
                  if (canvas) {
                    setZoom(1); 
                    canvas.renderAll();
                  }
                }}
                title="Reset Zoom"
                className="h-8 w-8 ml-1"
              >
                <Maximize className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
        
        <div className="flex items-center space-x-3">
          {lastUpdated && (
            <span className="text-xs text-muted-foreground">
              Last updated: {lastUpdated}
            </span>
          )}
          
          <Button 
            variant="ghost" 
            size="sm" 
            className="h-8 px-2 text-xs" 
            onClick={() => {
              if (onNewDesign) {
                // Use the provided onNewDesign callback if available
                onNewDesign();
              } else if (canvas) {
                // Clear the canvas (fallback behavior)
                canvas.clear();
                
                // Reset the undo/redo stacks
                const initialState = JSON.stringify(canvas);
                setUndoStack([initialState]);
                setRedoStack([]);
                setCurrentState(initialState);
                
                toast.success("New design created");
              }
            }}
          >
            <File className="h-4 w-4 mr-1" />
            New
          </Button>
          
          <Button
            onClick={handleSave}
            disabled={isSaving}
            className="bg-primary text-primary-foreground hover:bg-primary/90"
            size="sm"
          >
            {isSaving ? (
              <>
                <span className="mr-1 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent"></span>
                Saving...
              </>
            ) : (
              <>Save Design</>
          <div 
            className="relative shadow-md transform-gpu m-3" 
            style={{
              transform: `scale(${zoom})`,
              transition: 'transform 0.2s ease-out',
              backgroundColor: '#f7f7f7',
              backgroundImage: 'linear-gradient(45deg, #f0f0f0 25%, transparent 25%), linear-gradient(-45deg, #f0f0f0 25%, transparent 25%), linear-gradient(45deg, transparent 75%, #f0f0f0 75%), linear-gradient(-45deg, transparent 75%, #f0f0f0 75%)',
              backgroundSize: '16px 16px',
              backgroundPosition: '0 0, 0 8px, 8px -8px, -8px 0px',
              padding: '0',
              borderRadius: '4px',
              border: '1px solid #e0e0e0'
            }}
          >
            <div className="shadow-lg">
              <FabricCanvasComponent
                width={initialData?.content?.fabricCanvas?.width || 800}
                height={initialData?.content?.fabricCanvas?.height || 600}
                backgroundColor={initialData?.content?.fabricCanvas?.background || '#ffffff'}
                initialJSON={initialData?.content?.fabricCanvas ? JSON.stringify(initialData.content.fabricCanvas) : undefined}
                onCanvasReady={handleCanvasReady}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
